<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.notebook.notebookbackend.data.database.dao.UserDOMapper">
    <resultMap id="BaseResultMap" type="com.notebook.notebookbackend.data.database.DO.UserDO">
        <id column="user_id" jdbcType="INTEGER" property="userId"/>
        <result column="user_name" jdbcType="VARCHAR" property="userName"/>
        <result column="user_password" jdbcType="VARCHAR" property="userPassword"/>
        <result column="user_phone" jdbcType="CHAR" property="userPhone"/>
        <result column="user_email" jdbcType="VARCHAR" property="userEmail"/>
    </resultMap>
    <sql id="Base_Column_List">
        user_id, user_name, user_password, user_phone, user_email
    </sql>
    <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from user
        where user_id = #{userId,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
        delete
        from user
        where user_id = #{userId,jdbcType=INTEGER}
    </delete>
    <insert id="insert" parameterType="com.notebook.notebookbackend.data.database.DO.UserDO">
        insert into user (user_id, user_name, user_password,
                          user_phone, user_email)
        values (#{userId,jdbcType=INTEGER}, #{userName,jdbcType=VARCHAR}, #{userPassword,jdbcType=VARCHAR},
                #{userPhone,jdbcType=CHAR}, #{userEmail,jdbcType=VARCHAR})
    </insert>
    <insert id="insertSelective" parameterType="com.notebook.notebookbackend.data.database.DO.UserDO">
        insert into user
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="userId != null">
                user_id,
            </if>
            <if test="userName != null">
                user_name,
            </if>
            <if test="userPassword != null">
                user_password,
            </if>
            <if test="userPhone != null">
                user_phone,
            </if>
            <if test="userEmail != null">
                user_email,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="userId != null">
                #{userId,jdbcType=INTEGER},
            </if>
            <if test="userName != null">
                #{userName,jdbcType=VARCHAR},
            </if>
            <if test="userPassword != null">
                #{userPassword,jdbcType=VARCHAR},
            </if>
            <if test="userPhone != null">
                #{userPhone,jdbcType=CHAR},
            </if>
            <if test="userEmail != null">
                #{userEmail,jdbcType=VARCHAR},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.notebook.notebookbackend.data.database.DO.UserDO">
        update user
        <set>
            <if test="userName != null">
                user_name = #{userName,jdbcType=VARCHAR},
            </if>
            <if test="userPassword != null">
                user_password = #{userPassword,jdbcType=VARCHAR},
            </if>
            <if test="userPhone != null">
                user_phone = #{userPhone,jdbcType=CHAR},
            </if>
            <if test="userEmail != null">
                user_email = #{userEmail,jdbcType=VARCHAR},
            </if>
        </set>
        where user_id = #{userId,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.notebook.notebookbackend.data.database.DO.UserDO">
        update user
        set user_name     = #{userName,jdbcType=VARCHAR},
            user_password = #{userPassword,jdbcType=VARCHAR},
            user_phone    = #{userPhone,jdbcType=CHAR},
            user_email    = #{userEmail,jdbcType=VARCHAR}
        where user_id = #{userId,jdbcType=INTEGER}
    </update>
    <select id="selectByUserName" parameterType="java.lang.String" resultType="com.notebook.notebookbackend.BO.UserBO">
        select user_name, user_password
        from user
        where user_name = #{userName}
        limit 1
    </select>
    <insert id="createUser">
        insert into user(user_name, user_email, user_password, user_phone)
        values (#{userName}, #{email}, #{password}, #{phone})
    </insert>
</mapper>